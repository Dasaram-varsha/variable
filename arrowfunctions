Arrow functions
Es6 version
More readable and more structure
Anonymous functions (lambda functions)
Without function name but they are assigned to a variable

Synchronous functions
 Step by step
One task
Example:
Function task1(){
Console.log(“task1: start”)
}
Function task2(){
Console.log(“task2: start”)
}
Function task3(){
Console.log(“task3: start”)
}
Task1()
Task2()
Task3()

Asynchronous functions
Execute multiple tasks at a time

Java script call backs
A call back function is a function that is passed argument to another function 

Code:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<body>
    <!-- <script>
        let c=()=>{
            console.log("hello world")
        }
        c()
    </script> -->

    <!-- <script>       //with parameters
        let x=(a,b)=>{
            console.log(a+b)
        }
        x(20,10)
        x(10,40)
    </script> -->

    <!-- <script>         //one argument
        let greet=x=>{
            console.log(x)
        }
        greet('hello')
    </script> -->

    <!-- <script>         //without argument
        let greet=()=>{
            console.log("hi")
        }
        greet()
    </script> -->

    <!-- <script>
        let x= 18;
        let welcome=(x<18)?
        ()=>console.log("hi"):
        ()=>console.log("hello")
        welcome()
    </script> -->

    <!-- <script>
    function task1(){
        console.log("task1: start")
    }
    function task2(){
        console.log("task2: start")
    }
    function task3(){
        console.log("task3: start")
    }
    task1()
    task2()
    task3()
    </script> -->

    <!-- <script>
        console.log("hi")
        setTimeout(()=>{
            console.log("hello")
        },5000);
        console.log("bye")
    </script> -->

    <SCript>
        let myPromise=new Promise((resolve,reject)=>
    {let success=true;
        if(success){
            resolve("task completed");
        } else{
            reject("task failed")
        }
    }
)
    </SCript>
</body>
</html>
