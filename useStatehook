React Hooks
Introduced on react 16.8 version
To manage state and life cycle features in functional components
State
It is an essential part in react because it allows components to be dynamic, interactive and capable of responding to user input or change over time
1.	useStateHook: it allows to add state to functional component
syntax:
const[state, setState]=useState(initial value)
where, state is the current state
setState is a function to update the state
initial value is the value you want to set as the initial value

App.js
import React, {useState} from 'react';
<link rel='sytlesheet' href='index.css'></link>
// const Counter=()=>{
//   const[count, setCount]=useState(0);
//   return(
//     <div>
//       <h1>{count}</h1>
//       <button onClick={()=>setCount(count+1)}>Increment</button>
//       <button onClick={()=>setCount(count-1)}>Decrement</button>
//     </div>
//   )
// }
// export default Counter;

const ThemeToggler=()=>{
  const[theme, setTheme]=useState('light')
  const toggleTheme=()=>{
    setTheme(prevTheme=>(prevTheme=='light'?'dark':'light'))
  }
  return(
    <div style={{backgroundColor:theme=='light'?'white':'black', color:theme=='light'?'black':'white',textAlign:'center'}}>
      <h1>The current theme is {theme}</h1>
      <button onClick={toggleTheme}>toggleTheme</button>
    </div>
  )
}
export default ThemeToggler;

index.css
button{
  background-color: rgb(246, 178, 53);
  color: rgb(57, 10, 138);
  height: 40px;
  width: 100px;
  border-radius: 20%;
  border: 2px solid black;
  margin-right: 10px;
}
